})
dataset <- diamonds
shinyUI(pageWithSidebar(
headerPanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
))
runApp()
library(shinyapps)
deployApp()
warnings()
runApp()
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("tseries")
install.packages("xts")
install.packages("forecast") #, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
require(forecast)
require(tseries)
require(xts)
require(urca)
time_series <- read.csv("~/R_app/time_series.csv", sep=";")
View(time_series)
head(time_series)
daty <- time_series[,1]
daty
volume <- time_series[,2]
volume
whisky <- xts(x=volume, order.by=daty)
whisky <- xts(x=volume, order.by=as.Date(daty))
plot(whisky)
pound <- time_series[,3]
whisky_lpa <- xts(x=volume, order.by=as.Date(daty))
View(whisky)
whisky_pound <- ts(data=pound, start=c(1981))
plot(whisky_pound, type = "o")
plot(whisky_lpa)
odsezonowanie <- stl(whisky_pound, s.window="periodic")
odsezonowanie <- stl(whisky_lpa, s.window="periodic")
model1 <- arma(diff(whisky_pound), order=c(1,2))
class(model1)
summary(model1)
model2 <- arima(whisky_lpa, c(0,1,1))
class(model2)
model2
summary(model2)
names(model2)
model3 <- auto.arima(whisky_lpa, ic="aic")
model3
model4 <- auto.arima(whisky_lpa, d=1, ic="bic")
summary(model4)
summary(arma(x=diff(whisky_lpa)[-1], order=c(2,0)))
summary(arma(x=diff(whisky_lpa), order=c(2,0)))
length(whisky_lpa)
uczenie=1:26
test=27:32
modelPrognoza1 <- auto.arima(whisky_lpa[uczenie])
summary(modelPrognoza1)
prognoza1 <- forecast(modelPrognoza1, h=20)
plot(prognoza1)
plot(whisky_lpa[test])
plot(prognoza1)
lines(test,whisky_lpa[test], col="red", lwd="2")
modelPrognoza2 <- Arima(whisky_pound[uczenie], order=c(1,1,1), seasonal=list(order=c(2,1,2),period=12))
modelPrognoza2 <- Arima(whisky_pound[uczenie], order=c(1,1,1))
summary(modelPrognoza2)
prognoza2 <- forecast(modelPrognoza2, h=20)
plot(prognoza2)
lines(test,whisky_lpa[test], col="red", lwd="2")
plot(prognoza2)
lines(test,whisky_lpa[test], col="red", lwd="2")
lines(test,whisky_pound[test], col="red", lwd="2")
prognoza1 <- forecast(modelPrognoza1, h=4)
plot(prognoza1)
plot(whisky_lpa[test])
plot(prognoza1)
lines(test,whisky_lpa[test], col="red", lwd="2")
HEALTH_LVNG <- read.csv("C:/Users/Sylwester/Downloads/HEALTH_LVNG.csv")
View(HEALTH_LVNG)
aa <- read.csv("C:/Users/Sylwester/Downloads/aa.csv", sep=";")
View(aa)
data <- read.csv("C:/Users/Sylwester/Downloads/aab.csv", sep=";")
View(data)
year <- 1960:2013
data[,1]
c(year,data[,1])
year
rownames?
?rownames
rownames(data) <- year
data
View(data)
data[1,1]
data[0,1]
data[2,1]
data[2,0]
plot(data)
plot(data[,1])
plot(data[1,])
plot(data[,1])
View(data)
?plot
plot(data[,1], xlab = year)
plot(data[,1], xlab = "year)
plot(data[,1], xlab = "year")
?plot
plot(data[,1], year)
plot(year, data[,1])
plot(year, data)
plot(year, data[,2])
plot(year, data[,4])
plot(year, data[,6])
?plot
plot(year, data[,6], type="s")
plot(year, data[,6], type="l")
plot(year, data[,10], type="l")
head(data)
header(data)
names(data)
getwd()
setwd(//R_app)
setwd(\\R_app)
setwd("//R_app")
setwd("C://Users//Sylwester//Documents/R_app")
ls()
ls()
setwd("C://Users//Sylwester//Documents/R_app")
data <- read.csv("alcohol_consumption.csv", sep=";")
year <- 1960:2013
rownames(data) <- year
plot(year, data[,10], type="l")
names(data)
View(data)
sum(data[,9])
sum(data[,9], na.omit=T)
?na.omit
data <- read.csv("alcohol_consumption.csv", sep=";")
names(data)
?data
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
choices = c("sock", "pressure", "cars")),
runApp()
runApp()
country <- names(data)
country
runApp()
runApp()
runApp()
runApp()
data[, "Poland"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderplot
?renderPlot
runApp()
runApp()
runApp()
runApp()
runApp()
runExample("02_text")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(googleVis)
install.packages(googleVis)
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
library(googleVis)
data[1,]
G <- gvisGeoChart(data[1,], locationvar = "Country")
print(G, "chart")
runApp()
print(G, "chart")
df <- data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line1 <- gvisLineChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Line1)
df
plot(Line1)
G <- gvisLineChart(data, xvar = year, yvar = names(data))
View(data)
data
data[,1]
data[,1:]
data[,1:54]
data[,1:11]
data[,1:2]
data[1:2,1:2]
data[2:2,1:2]
c(1:10)
G <- gvisLineChart(data, xvar = c(1960:2013), yvar = names(data))
G <- gvisLineChart(data)
print(G, "chart")
plot(G)
plot(G)
G <- gvisLineChart(data, yvar = country)
plot(G)
G <- gvisLineChart(data, xvar = year, yvar = country)
G <- gvisLineChart(data, xvar = country, yvar = year)
G <- gvisLineChart(data, xvar = country)
View(df)
ndata <- data.frame(year = year, data)
ndata
View(ndata)
G <- gvisLineChart(data, xvar = year, yvar = country)
plot(G)
G <- gvisLineChart(data, xvar = country, yvar = year)
G <- gvisLineChart(data, xvar = year, yvar = names(data))
G <- gvisLineChart(data, xvar = "year", yvar = names(data))
library(rCharts)
require(rCharts)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
runApp()
runApp()
?plot
?rcharts
?rHharts
?rCharts
require(rCharts)
h1 <- hPlot(x = "index", y = "NumVar1", data = simData, type = "line")
h1 <- hPlot(x = "index", y = "NumVar1", data = data, type = "line")
h1 <- hPlot(x = "index", y = "NumVar1", data = data[,1], type = "line")
h1 <- hPlot(x = "index", y = "NumVar1", data = data[1,], type = "line")
FacVar1 = as.factor(rep(c("level1", "level2"), 25))
FacVar2 = as.factor(rep(c("levelA", "levelB", "levelC"), 17)[-51])
FacVar3 = as.factor(rep(c("levelI", "levelII", "levelIII", "levelIV"), 13)[-c(51:52)])
### 4 Numeric Vars
set.seed(123)
NumVar1 = round(rnorm(n = 50, mean = 1000, sd = 50), digits = 2)  ### Normal distribution
set.seed(123)
NumVar2 = round(runif(n = 50, min = 500, max = 1500), digits = 2)  ### Uniform distribution
set.seed(123)
NumVar3 = round(rexp(n = 50, rate = 0.001))  ### Exponential distribution
NumVar4 = 2001:2050
simData = data.frame(FacVar1, FacVar2, FacVar3, NumVar1, NumVar2, NumVar3, NumVar4)
simData
h1 <- hPlot(x = "index", y = "NumVar1", data = simData, type = "line")
simsub = simData[, c(4:5, 8)]
simsubmelt = melt(simsub, id = c("index"))
h2a = hPlot(x = "index", y = "value", group = "variable", data = simsubmelt,
type = "line")
h1 <- hPlot( data = data, type = "line")
h1 <- hPlot(x = "country", y = "NumVar1" data = data, type = "line")
h1 <- hPlot(x = "country", y = "NumVar1", data = data, type = "line")
View(data)
h1 <- hPlot(x = country, y = "NumVar1", data = data, type = "line")
h1 <- hPlot(x = country, y = year, data = data, type = "line")
h1 <- hPlot(x = country, y = year, data, type = "line")
h1 <- hPlot(x = country, y = year, data = ndata, type = "line")
h1 <- hPlot(x = "country", y = "year", data = ndata, type = "line")
h1 <- hPlot(x = "year", y = "country", data = ndata, type = "line")
h1 <- hPlot(x = "year", y = country, data = ndata, type = "line")
h1 <- hPlot(x = "year", y = "country", data = ndata, type = "line")
ndata
View(ndata)
h1 <- hPlot(x = "year", y = "country", data = ndata, type = "line")
names(ndata)
names(ndata[,1])
names(ndata[,2])
names(ndata[1,])
names(ndata[2,])
names(ndata[,1:2])
h1 <- hPlot(x = "year", y = "country", data = ndata[2:35], type = "line")
h1 <- hPlot(x = year, y = "country", data = ndata[2:35], type = "line")
row.names(ndata)
row.names(data)
row.names(data) <- year
row.names(data)
h1 <- hPlot(x = "year", y = "country", data = data, type = "line")
data
h1 <- hPlot(x = year, y = "country", data = data, type = "line")
h1 <- hPlot(x = "country", y = "country", data = data, type = "line")
plot(year, data[,10], type="l")
plot(data[,10], type="l")
plot(year, data[,10], type="l")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
year[,2]
year[2,]
year[1  ,]
year[1,1]
year
year[1]
year[length(c(1,2,3))]
year[1:length(c(1,2,3))]
runApp()
runApp()
data[,"Chile"]
view(data[,"Chile"])
View(data)
View(data[,"Chile"])
View(data)
View(ndata)
View(ndata)
View(data)
names(data)
runApp()
runApp()
plot(year, data[,3],
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
col="blue", lwd = 3)
?line
?lines
plot(year, data[,3],
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
col="blue", lwd = 3)
lines(year, data[,4])
lines(year, data[,7])
lines(year, data[,3])
lines(year)
lines(year)
lines(year, data[,3], col="red", lwd = 2)
lines(year, data[,5], type="s", col="red", lwd = 2, lty = 2)
lines(year, data[,5], col="red", lwd = 2, lty = 2)
lines(year, data[,6], col="red", lwd = 2, lty = 2)
lines(year, data[,6], col="red", lwd = 2)
plot(year, data[,3], xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
col="blue", lwd = 3)
type="l", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
plot(year, data[,3],
type="l", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
col="blue", lwd = 3)
lines(year, data[,6], col="red", lwd = 2)
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ndata)
runApp()
runApp()
runApp(list(
ui = pageWithSidebar(
headerPanel('Dynamic Tabs'),
sidebarPanel(
numericInput("nTabs", 'No. of Tabs', 5)
),
mainPanel(
uiOutput('mytabs')
)
),
server = function(input, output, session){
output$mytabs = renderUI({
nTabs = input$nTabs
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
})
}
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(data)
summarize(data)
View(data)
min(data)
na.omit(data)
min(na.omit(data))
max(na.omit(data))
plot(year, 0:17,
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)")
plot(year, data[,4],
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
ylim=c(0,17))
plot(year, data[,4],
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
ylim=c(1,17))
runApp()
max(na.omit(data))
View(data)
max(data)
runApp()
runApp()
runApp()
runApp()
text(63, 150, paste("blue = ", input$x))
text(63, 150, paste("blue = "))
text(100, 150, paste("blue = "))
text(100, 150, "blue = ")
text(100, "blue = ")
text(4, "blue = ")
plot(year, data[,4],
type="s", xlab = "Year", ylab = "Alcohol consumption (liters per capita)",
ylim=c(1,20))
text(4, "blue = ")
text(200, "blue = ")
text(500, "blue = ")
mtext(500, "blue = ")
mtext("blue = ")
mtext(c("Low","High"),side=1,line=2,at=c(5,7))
text(c(2,2),c(37,35),labels=c("Non-case","Case"))
usr <- par( "usr" )
text( usr[ 1 ], usr[ 4 ], "left top",     adj = c( 0, 1 ), col = "blue" )
usr[1]
usr[4]
text(2000, "blue = ")
text(2000, 10, "blue = ")
text(2000, 100, "blue = ")
text(2000, 15, "blue = ")
text(1400, 15, "blue = ")
text(1700, 15, "blue = ")
text(1800, 15, "blue = ")
text(1900, 15, "blue = ")
text(1999, 15, "blue = ")
text(1980, 15, "blue = ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot.new()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
na.omit(data)
max(na.omit(data))
max(na.pass(data))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("alcohol_consumption.csv", sep=";")
View(data)
year <- 1960:2013
rownames(data) <- year
View(data)
